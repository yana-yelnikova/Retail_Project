version: 2

models:
  - name: shopify_matched_products # Name of dbt model
    description: "An intermediate model filtering Shopify orders to include only matched electronic products (laptops, headphones, smartphones, tablets)."
    columns:
      # Columns passed from add_full_category_name_to_shopify via SELECT *
      - name: ORDER_ID
        description: "Unique identifier for the Shopify order."
        tests:
          - not_null
          - unique

      - name: SKU
        description: "Stock Keeping Unit (SKU) identifier for the product."
        tests:
          - not_null

      - name: PRODUCT_NAME
        description: "Name of the product."
        tests:
          - not_null
          - accepted_values:
              values: ["Laptop", "Headphones", "Smartphone", "Tablet"] # Ensures only these products are present

      - name: CATEGORY
        description: "Original abbreviated product category code (e.g., 'ELEC')."

      - name: CHANNEL
        description: "Sales channel (e.g., 'Online')."

      - name: CUSTOMER_EMAIL
        description: "Customer's email address."

      - name: PRICE
        description: "Unit price of the product in the order."
        tests:
          - not_null

      - name: QUANTITY
        description: "Quantity of product units in the order."
        tests:
          - not_null

      - name: ORDER_DATE
        description: "Date when the order was placed."
        tests:
          - not_null

      - name: WEEK
        description: "Week number in which the order was placed."

      - name: YEAR
        description: "Year in which the order was placed."

      - name: full_category_name # Column added in the previous model
        description: "Full, human-readable name of the product category (e.g., 'Electronics')."
        tests:
          - not_null
          - accepted_values:
              values: ["Electronics"] # If all these products belong to Electronics

      # New calculated column
      - name: total_item_revenue
        description: "Total revenue for this specific item in the order (PRICE * QUANTITY)."
        tests:
          - not_null
